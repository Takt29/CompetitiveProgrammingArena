rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // *** tool ***
    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    // *** auth ***
    function isAuthenticated() {
      return request.auth != null && request.auth.token.verified == true;
    }
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    function isAdminUser() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    // *** audit ***
    function isValidCreatedAt() {
      // TODO: create以外
      return
        (request.method != 'create' || incomingData().createdAt == request.time) &&
        (request.method != 'update' || incomingData().createdAt == existingData().createdAt);
    }
    function isValidUpdatedAt() {
      return incomingData().updatedAt == request.time;
    }
    function isValidCreatedBy() {
      return
        (request.method != 'create' || incomingData().createdBy == request.auth.uid) &&
        (request.method != 'update' || incomingData().createdBy == existingData().createdBy);
    }
    function isValidAudit() {
      return isValidCreatedAt() && isValidUpdatedAt() && isValidCreatedBy();
    }

    // *** rules ***
    allow read: if isAdminUser();
    allow write: if isAdminUser() && isValidAudit();

    match /contests/{contestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidAudit();
      allow update: if isAdminUser() && isValidAudit();
      allow delete: if isAdminUser();

      match /contestants/{userId} {
        allow read: if isAuthenticated();
        allow create: if isUserAuthenticated(userId) && isValidAudit();
        allow update: if isAdminUser() && isValidAudit();
        allow delete: if isAdminUser();
      }
    }
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidAudit();
      allow update: if isAdminUser() && isValidAudit();
      allow delete: if isAdminUser();
    }
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isUserAuthenticated(userId) && isValidAudit();
      allow delete: if isAdminUser();
    }
    match /submissions/{submissionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if false;
    }
    match /registrationCodes/{userId} {
      allow read: if isAdminUser();
      allow create, update: if isAdminUser() && isValidAudit();
      allow delete: if isAdminUser();
    }
    match /externalContests/{externalContestId} {
      allow read: if isAdminUser();
      allow create, update, delete: if false;
    }
  }
}